{"version":3,"sources":["webpack:///./assets/styles/index.scss","webpack:///./app/observationMapLayers.js","webpack:///./app/baseMap.js","webpack:///./app/observations.js","webpack:///./app/observationsBarChart.js","webpack:///./app/communities.js","webpack:///./app/winterTempsMapScroller.js","webpack:///./app/permafrostMapScroller.js","webpack:///./app/areaBurnedPlot.js","webpack:///./app/historicalFiresMapScroller.js","webpack:///./app/snowdayFractionMapScroller.js","webpack:///./app/main.js"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","observationColors","observationLayers","observations","features","filter","e","test","properties","condition","concat","paneNames","layers","map","featureName","index","L","geoJSON","type","pointToLayer","geoJsonPoint","latlng","lat","lng","circleMarker","pane","weight","radius","color","fillColor","fillOpacity","mapOptions","minZoom","maxZoom","zoom","center","crs","Proj","CRS","resolutions","origin","scrollWheelZoom","doubleClickZoom","zoomControl","dragging","baseLayerOptions","transparent","srs","format","version","tiled","continuousWorld","getBaseMap","divId","_objectSpread","forEach","createPane","tileLayer","wms","addTo","setupObservationsScroller","selector","images","document","querySelectorAll","scrollama","setup","step","container","graphic","onStepEnter","obj","img","classList","add","remove","obs","data","x","y","mode","name","text","String","textposition","textfont","orientation","hoverinfo","Plotly","plot","title","font","family","size","xaxis","range","yaxis","autorange","margin","l","r","b","t","pad","displayModeBar","staticPlot","communities","geometry","coordinates","getCommunitiesLayer","layerGroup","marker","icon","divIcon","className","html","zIndex","stroke","tempsAndFrozenMap","tempsFrozenSeasonMapLayers","layerName","winterTempsMapScroller_objectSpread","getElementsByClassName","unshift","getPane","scroller","window","addEventListener","resize","layer","permafrostMap","permafrostMapLayers","permafrostMapScroller_objectSpread","years","newPlot","barmode","legend","responsive","dtick","firesMap","historicalFiresMapScroller_objectSpread","styles","firesMapLayers","snowdayFractionMap","snowdayFractionMapLayers","snowdayFractionMapScroller_objectSpread","getElementById","style","display","LazyLoad","elements_selector","elements","Stickyfill"],"mappings":"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","file":"1.25ed78257afcbd9d9bb8.js","sourcesContent":["\nvar content = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js??ref--8-2!../../node_modules/postcss-loader/src/index.js??ref--8-3!../../node_modules/sass-loader/lib/loader.js??ref--8-4!./index.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js??ref--8-2!../../node_modules/postcss-loader/src/index.js??ref--8-3!../../node_modules/sass-loader/lib/loader.js??ref--8-4!./index.scss\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js??ref--8-2!../../node_modules/postcss-loader/src/index.js??ref--8-3!../../node_modules/sass-loader/lib/loader.js??ref--8-4!./index.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import observations from 'assets/all-observations'\nimport L from 'leaflet'\n\n// Color map for the different categories\nvar observationColors = [\n  '#a6cee3',\n  '#1f78b4',\n  '#b2df8a',\n  '#33a02c',\n  '#fb9a99'\n]\n\n// Filter categories for use in the scroller\nvar observationLayers = [\n  // 0 - Ice\n  observations.features.filter(e => {\n    return /.*Ice.*/g.test(e.properties.condition)\n  }),\n  // 1 - Snow\n  observations.features.filter(e => {\n    return /.*Snow.*/g.test(e.properties.condition)\n  }),\n  // 2 - Erosion, sedimentation and water levels -- both land and water\n  observations.features.filter(e => {\n    return /.*Erosion.*/g.test(e.properties.condition)\n  }).concat(observations.features.filter(e => {\n    return /.*Sedim.*/g.test(e.properties.condition)\n  })).concat(observations.features.filter(e => {\n    return /.*Water*/g.test(e.properties.condition)\n  })),\n  // 3 - Vegetation\n  observations.features.filter(e => {\n    return /.*Veg*/g.test(e.properties.condition)\n  })\n]\n\nvar paneNames = ['ice', 'snow', 'erosion', 'vegetation']\nvar layers = paneNames.map(\n  (featureName, index) => {\n    return L.geoJSON({\n      'type': 'FeatureCollection',\n      'features': observationLayers[index]\n    }, {\n      pointToLayer: (geoJsonPoint, latlng) => {\n        if (latlng.lat === 0 || latlng.lng === 0) {\n          return false\n        }\n        if (latlng.lng > 0) {\n          latlng.lng = -latlng.lng\n        }\n        return L.circleMarker(latlng, {\n          pane: 'observations-' + featureName,\n          weight: 1.5,\n          radius: 5,\n          color: '#333',\n          fillColor: observationColors[index],\n          fillOpacity: 0.7\n        })\n      }\n    })\n  }\n)\n\nexport { layers, paneNames }\n","import L from 'leaflet'\nimport p4l from 'proj4leaflet' // eslint-disable-line\nimport 'leaflet-defaulticon-compatibility'\nimport { paneNames } from 'observationMapLayers'\n\nvar crs = new L.Proj.CRS('EPSG:3338',\n'+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs',\n  {\n    resolutions: [4096, 2048, 1024, 512, 256, 128, 64],\n\n    // Origin should be lower-left coordinate\n    // in projected space.  Use GeoServer to\n    // find this:\n    // TileSet > Gridset Bounds > compute from maximum extent of SRS\n    origin: [-4648005.934316417, 444809.882955059]\n  }\n)\nvar mapOptions = {\n  minZoom: 0,\n  maxZoom: 7,\n  zoom: 1,\n  center: [64.62756867126886, -151.58022337112894],\n  crs: crs,\n  scrollWheelZoom: false,\n  doubleClickZoom: false,\n  zoomControl: false,\n  dragging: false\n}\n\nexport var baseLayerOptions = {\n  transparent: true,\n  srs: 'EPSG:3338',\n  format: 'image/png',\n  version: '1.3',\n  tiled: true, // needed for GeoWebCache\n  continuousWorld: true // needed for non-3857 projs\n}\n\nfunction getBaseLayer () {\n  return L.tileLayer.wms('http://54.70.10.93:8080/geoserver/wms',\n    {\n      ...baseLayerOptions,\n      layers: ['alaska_osm']\n    }\n  )\n}\n\nexport function getBaseMap (divId, options) {\n  var map = L.map(divId, { ...mapOptions, ...options })\n  paneNames.forEach(pane => {\n    map.createPane('observations-' + pane)\n  })\n  getBaseLayer().addTo(map)\n  return map\n}\n","import scrollama from 'scrollama'\nimport forEach from 'lodash.foreach'\n\nexport function setupObservationsScroller (selector) {\n  var images = document.querySelectorAll(selector + ' .observations__images > img, ' + selector + ' .observations__images > figure')\n  let _scroller = scrollama()\n\n  // setup the instance, pass callback functions\n  _scroller\n  .setup(\n    {\n      step: selector + ' .scroll__text .step',\n      container: selector,\n      graphic: selector + ' .scroll__graphic'\n    }\n  ).onStepEnter(\n    (obj) => {\n      forEach(images, (img, index) => {\n        if (obj.index === index) {\n          images[index].classList.add('shown')\n          images[index].classList.remove('hidden')\n        } else {\n          images[index].classList.add('hidden')\n          images[index].classList.remove('shown')\n        }\n      })\n    }\n  )\n}\n","import Plotly from 'plotly.js-basic-dist'\n\nconst categories = ['Ice', 'Water levels', 'Snow', 'Vegetation changes', 'Erosion', 'Sedimentation', 'Weather']\nconst obs = [156, 134, 126, 112, 100, 67, 52]\n\nvar trace1 = {\n  x: obs,\n  y: categories,\n  mode: 'markers',\n  type: 'bar',\n  name: 'Team A',\n  text: obs.map(String),\n  textposition: 'auto',\n  textfont: {\n    color: '#fff'\n  },\n  orientation: 'h',\n  hoverinfo: 'none'\n}\n\nvar data = [ trace1 ]\n\nvar layout = {\n  title: false,\n  font: {\n    family: 'Cabin, sans-serif',\n    size: 18\n  },\n  xaxis: {\n    range: [0, 165],\n    title: '# of observations'\n  },\n  yaxis: {\n    type: 'category',\n    autorange: 'reversed'\n  },\n  margin: {\n    l: 170,\n    r: 0,\n    b: 80,\n    t: 0,\n    pad: 10\n  }\n}\n\nPlotly.plot('observations-chart', data, layout, {\n  displayModeBar: false,\n  staticPlot: true\n})\n","import L from 'leaflet'\n\nconst communities = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-146.409665028, 67.05333312]\n      },\n      properties: {\n        name: 'Venetie'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-147.337916, 66.390584]\n      },\n      properties: {\n        name: 'Beaver'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-158.28377, 64.689872]\n      },\n      properties: {\n        name: 'Nulato'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-160.111792, 62.895443]\n      },\n      properties: {\n        name: 'Grayling'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-159.856076, 62.187014]\n      },\n      properties: {\n        name: 'Holy Cross'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-152.462155, 63.790117]\n      },\n      properties: {\n        name: 'Lake Minchumina'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-148.97048, 63.959806]\n      },\n      properties: {\n        name: 'Healy'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-143.037543, 63.328852]\n      },\n      properties: {\n        name: 'Tok'\n      }\n    },\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-145.693529, 64.060263]\n      },\n      properties: {\n        name: 'Delta'\n      }\n    }\n  ]\n}\n\nexport default function getCommunitiesLayer () {\n  return L.layerGroup([\n    L.geoJSON(communities,\n      {\n        pointToLayer: (geoJsonPoint, latlng) => {\n          return L.marker(latlng, {\n            icon: L.divIcon({\n              className: 'community-divicon',\n              html: geoJsonPoint.properties.name\n            }),\n            zIndex: 5000\n          })\n        }\n      }\n    ),\n    L.geoJSON(communities,\n      {\n        pointToLayer: (geoJsonPoint, latlng) => {\n          return L.circleMarker(latlng, {\n            stroke: false,\n            fillOpacity: 0.8,\n            radius: 5,\n            fillColor: '#222'\n          })\n        }\n      }\n    )\n  ])\n}\n","import { getBaseMap, baseLayerOptions } from 'baseMap'\nimport L from 'leaflet'\nimport getCommunitiesLayer from 'communities'\nimport scrollama from 'scrollama'\nimport { layers } from 'observationMapLayers'\n\nvar tempsAndFrozenMap = getBaseMap('ice-and-snow__map')\nlayers[0].addTo(tempsAndFrozenMap)\ngetCommunitiesLayer().addTo(tempsAndFrozenMap)\n\nvar tempsFrozenSeasonMapLayers = []\n\n// Map an array of properties to DOM reference for an\n// instantiated Leaflet element\ntempsFrozenSeasonMapLayers = [\n  'wintertemp_1970s_tcc',\n  'wintertemp_2010s_tcc'\n].map(layerName => {\n  L.tileLayer.wms(\n    'http://54.70.10.93:8080/geoserver/wms',\n    {\n      ...baseLayerOptions,\n      layers: ['nasa_above:' + layerName],\n      className: 'animate-layer map-layer-invisible ' + layerName\n    }\n  ).addTo(tempsAndFrozenMap)\n  return document.getElementsByClassName(layerName)[0]\n})\n\ntempsFrozenSeasonMapLayers.unshift(\n  tempsAndFrozenMap.getPane('observations-ice')\n)\n\nconst scroller = scrollama()\nvar resizeHandler = function () {\n  scroller.resize()\n}\nwindow.addEventListener('resize', resizeHandler)\n\nfunction handleStepEnter (obj) {\n  // If on 1st step, hide map legend.\n  if (obj.index !== 0) {\n    document.getElementsByClassName('ice-and-snow__legend')[0].classList.remove('hidden')\n    document.getElementsByClassName('ice-and-snow__legend')[0].classList.add('visible')\n  } else {\n    document.getElementsByClassName('ice-and-snow__legend')[0].classList.add('hidden')\n    document.getElementsByClassName('ice-and-snow__legend')[0].classList.remove('visible')\n  }\n  tempsFrozenSeasonMapLayers.forEach((layer, index) => {\n    if (index === obj.index) {\n      layer.classList.remove('map-layer-invisible')\n      layer.classList.add('map-layer-visible')\n    } else {\n      layer.classList.remove('map-layer-visible')\n      layer.classList.add('map-layer-invisible')\n    }\n  })\n}\n\nscroller\n  .setup({\n    step: '.ice-and-snow__scroll-container .scroll__text .step',\n    container: '.ice-and-snow__scroll-container',\n    graphic: '.ice-and-snow__scroll-container .scroll__graphic'\n  })\n  .onStepEnter(handleStepEnter)\n","import { getBaseMap, baseLayerOptions } from 'baseMap'\nimport L from 'leaflet'\nimport getCommunitiesLayer from 'communities'\nimport scrollama from 'scrollama'\nimport { layers } from 'observationMapLayers'\n\nvar permafrostMap = getBaseMap('permafrost-map__map')\nlayers[2].addTo(permafrostMap)\ngetCommunitiesLayer().addTo(permafrostMap)\n\n// Map an array of properties to DOM reference for an\n// instantiated Leaflet element.\nvar permafrostMapLayers = [\n  'July_permafrost_2m_1970s_tcc',\n  'July_permafrost_2m_2010s_tcc'\n].map(layerName => {\n  L.tileLayer.wms(\n    'http://54.70.10.93:8080/geoserver/wms',\n    {\n      ...baseLayerOptions,\n      layers: ['nasa_above:' + layerName],\n      className: 'animate-layer map-layer-invisible ' + layerName\n    }\n  ).addTo(permafrostMap)\n  return document.getElementsByClassName(layerName)[0]\n})\n\npermafrostMapLayers.unshift(\n  permafrostMap.getPane('observations-erosion')\n)\n\nconst scroller = scrollama()\nvar resizeHandler = function () {\n  scroller.resize()\n}\nwindow.addEventListener('resize', resizeHandler)\n\nfunction handleStepEnter (obj) {\n  // If on 1st step, hide map legend.\n  if (obj.index !== 0) {\n    document.getElementsByClassName('permafrost-map__legend')[0].classList.remove('hidden')\n    document.getElementsByClassName('permafrost-map__legend')[0].classList.add('visible')\n  } else {\n    document.getElementsByClassName('permafrost-map__legend')[0].classList.add('hidden')\n    document.getElementsByClassName('permafrost-map__legend')[0].classList.remove('visible')\n  }\n  permafrostMapLayers.forEach((layer, index) => {\n    if (index === obj.index) {\n      layer.classList.remove('map-layer-invisible')\n      layer.classList.add('map-layer-visible')\n    } else {\n      layer.classList.remove('map-layer-visible')\n      layer.classList.add('map-layer-invisible')\n    }\n  })\n}\n\nscroller\n  .setup({\n    step: '.permafrost-map__scroll-container .scroll__text .step',\n    container: '.permafrost-map__scroll-container',\n    graphic: '.permafrost-map__scroll-container .scroll__graphic'\n  })\n  .onStepEnter(handleStepEnter)\n","import Plotly from 'plotly.js-basic-dist'\n\nconst years = ['1950s', '1960s', '1970s', '1980s', '1990s', '2000s', '2010s', '2020s', '2030s', '2040s', '2050s', '2060s', '2070s', '2080s', '2090s']\nconst historical = [30764, 17505, 10257, 13574, 29616, 63200]\nconst modeled = [ undefined, undefined, undefined, undefined, undefined, undefined, 10088, 23238, 24853, 21833, 21253, 31987, 20525, 30321 ]\n\nvar historicalTrace = {\n  x: years,\n  y: historical,\n  name: 'Historical',\n  type: 'bar'\n}\n\nvar modelledTrace = {\n  x: years,\n  y: modeled,\n  name: 'Projected',\n  type: 'bar'\n}\n\nvar data = [historicalTrace, modelledTrace]\n\nvar layout = {\n  barmode: 'group',\n  title: 'Total Area Burned by Decade (km&#x00b2;)',\n  font: {\n    family: 'Cabin, sans-serif'\n  },\n  legend: {\n    x: 0,\n    y: -0.4,\n    font: {\n      size: 18\n    }\n  },\n  responsive: true,\n  xaxis: {\n    dtick: 1\n  }\n}\n\nPlotly.newPlot('area-burned-plot', data, layout, {\n  displayModeBar: false,\n  staticPlot: true\n})\n","import { getBaseMap, baseLayerOptions } from 'baseMap'\nimport L from 'leaflet'\nimport { layers } from 'observationMapLayers'\nimport getCommunitiesLayer from 'communities'\nimport scrollama from 'scrollama'\n\nvar firesMap = getBaseMap('historical-fires__map')\nlayers[3].addTo(firesMap)\ngetCommunitiesLayer().addTo(firesMap)\n\nL.tileLayer.wms(\n  'http://54.70.10.93:8080/geoserver/wms',\n  {\n    ...baseLayerOptions,\n    layers: ['historical_fire_perimiters'],\n    className: 'animate-layer map-layer-invisible fire_history_70s_2010s',\n    styles: 'fire_history_70s_2010s' // WMS style for layer\n  }\n).addTo(firesMap)\n\nvar firesMapLayers = [\n  firesMap.getPane('observations-vegetation'),\n  document.getElementsByClassName('fire_history_70s_2010s')[0]\n]\n\nconst scroller = scrollama()\nvar resizeHandler = function () {\n  scroller.resize()\n}\nwindow.addEventListener('resize', resizeHandler)\n\nfunction handleStepEnter (obj) {\n  if (obj.index !== 0) {\n    document.getElementsByClassName('historical-fires__legend')[0].classList.remove('hidden')\n    document.getElementsByClassName('historical-fires__legend')[0].classList.add('visible')\n  } else {\n    document.getElementsByClassName('historical-fires__legend')[0].classList.add('hidden')\n    document.getElementsByClassName('historical-fires__legend')[0].classList.remove('visible')\n  }\n  firesMapLayers.forEach((layer, index) => {\n    if (index === obj.index) {\n      layer.classList.remove('map-layer-invisible')\n      layer.classList.add('map-layer-visible')\n    } else {\n      layer.classList.remove('map-layer-visible')\n      layer.classList.add('map-layer-invisible')\n    }\n  })\n}\n\nscroller\n  .setup({\n    step: '.historical-fires__scroll-container .scroll__text .step',\n    container: '.historical-fires__scroll-container',\n    graphic: '.historical-fires__scroll-container .scroll__graphic'\n  })\n  .onStepEnter(handleStepEnter)\n","import { getBaseMap, baseLayerOptions } from 'baseMap'\nimport L from 'leaflet'\nimport getCommunitiesLayer from 'communities'\nimport scrollama from 'scrollama'\nimport { layers } from 'observationMapLayers'\n\nvar snowdayFractionMap = getBaseMap('snowday-fraction-map__map')\nlayers[1].addTo(snowdayFractionMap)\ngetCommunitiesLayer().addTo(snowdayFractionMap)\n\n// Map an array of properties to DOM reference for an\n// instantiated Leaflet element.\nvar snowdayFractionMapLayers = [\n  'Oct_snowdayfraction_1970s_tcc_reprojected',\n  'Oct_snowdayfraction_2010s_tcc_reprojected'\n].map(layerName => {\n  L.tileLayer.wms(\n    'http://54.70.10.93:8080/geoserver/wms',\n    {\n      ...baseLayerOptions,\n      layers: ['nasa_above:' + layerName],\n      className: 'animate-layer map-layer-invisible ' + layerName\n    }\n  ).addTo(snowdayFractionMap)\n  return document.getElementsByClassName(layerName)[0]\n})\n\nsnowdayFractionMapLayers.unshift(\n  snowdayFractionMap.getPane('observations-snow')\n)\n\nconst scroller = scrollama()\nvar resizeHandler = function () {\n  scroller.resize()\n}\nwindow.addEventListener('resize', resizeHandler)\n\nfunction handleStepEnter (obj) {\n  // If on 1st step, hide map legend.\n  if (obj.index !== 0) {\n    document.getElementsByClassName('snowday-fraction-map__legend')[0].classList.remove('hidden')\n    document.getElementsByClassName('snowday-fraction-map__legend')[0].classList.add('visible')\n  } else {\n    document.getElementsByClassName('snowday-fraction-map__legend')[0].classList.add('hidden')\n    document.getElementsByClassName('snowday-fraction-map__legend')[0].classList.remove('visible')\n  }\n  snowdayFractionMapLayers.forEach((layer, index) => {\n    if (index === obj.index) {\n      layer.classList.remove('map-layer-invisible')\n      layer.classList.add('map-layer-visible')\n    } else {\n      layer.classList.remove('map-layer-visible')\n      layer.classList.add('map-layer-invisible')\n    }\n  })\n}\n\nscroller\n  .setup({\n    step: '.snowday-fraction-map__scroll-container .scroll__text .step',\n    container: '.snowday-fraction-map__scroll-container',\n    graphic: '.snowday-fraction-map__scroll-container .scroll__graphic'\n  })\n  .onStepEnter(handleStepEnter)\n","/**\n * Application entry point for full (non-mobile) functionality.\n */\n// When DOM is ready, hide loading screen.\nwindow.addEventListener('load', function () {\n  let overlay = document.getElementById('loading-overlay')\n  overlay.classList.add('loaded')\n\n  let app = document.getElementById('app-wrapper')\n  app.style.display = 'block'\n})\n\n// Load application styles\nimport 'styles/index.scss'\n\n// Additional polyfills\nimport 'intersection-observer'\nimport Stickyfill from 'stickyfilljs'\n\n// Lazy-load images below the fold\nimport LazyLoad from 'vanilla-lazyload'\nvar lazyLoaded = new LazyLoad({ // eslint-disable-line\n  elements_selector: '.lazy'\n})\n\n// Shared code\nimport 'baseMap'\nimport { setupObservationsScroller } from 'observations'\n\n// Set up photo observation scrollers\nsetupObservationsScroller('.ice-observations')\nsetupObservationsScroller('.snow-observations')\nsetupObservationsScroller('.river-observations')\nsetupObservationsScroller('.land-observations')\nsetupObservationsScroller('.vegetation-observations')\n\n// Other region-specific code\nimport 'observationsBarChart'\nimport 'winterTempsMapScroller'\nimport 'permafrostMapScroller'\nimport 'areaBurnedPlot'\nimport 'observationMapLayers'\nimport 'historicalFiresMapScroller'\nimport 'snowdayFractionMapScroller'\n\n// Polyfill position:sticky for IE11\nvar elements = document.querySelectorAll('.sticky')\nStickyfill.add(elements)\n"],"sourceRoot":""}